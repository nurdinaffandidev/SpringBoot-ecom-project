### ✅ What is JWT (JSON Web Token)?

JWT is a compact, URL-safe token format used for securely transmitting information between parties,
most commonly for authentication and authorization in modern web applications and APIs.

---

### 🔐 JWT Structure

A JWT looks like this:

```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM0NTYiLCJyb2xlIjoiadminIiwiaWF0IjoxNjEyMzQ1Njc4fQ.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

It has 3 parts, separated by dots:

1. Header – algorithm & token type
2. Payload – user info / claims
3. Signature – for integrity & verification

---

### 🧠 Why Use JWT?

#### ✅ 1. ** Stateless Authentication **

* No need to store sessions on the server.
* All the user info is stored inside the token itself.

#### ✅ 2. ** Scalable for Microservices & APIs **

* Works well across services without needing shared session storage.
* The backend just **verifies** the token.

#### ✅ 3. ** Portable & Compact **

* Can be sent via HTTP headers, cookies, or URLs.
* Base64-encoded and compact.

#### ✅ 4. ** Secure ** (if implemented properly)

* Tokens are signed (often with HMAC or RSA) — can't be tampered with.

---

### 🔐 Common Use Case: JWT Authentication Flow

1. User logs in with username/password.
2. Server validates credentials and returns a JWT.
3. Client stores the token (usually in localStorage or memory).
4. Client sends the JWT in the `Authorization` header with each request:

   ```
   Authorization: Bearer <jwt_token>
   ```
5. Server verifies the token on every request — no session needed.

---

### 📦 Example JWT Payload (Decoded):

```json
{
  "sub": "123456",
  "username": "john_doe",
  "role": "admin",
  "iat": 1717400000,
  "exp": 1717403600
}
```

* `sub`: subject (user ID)
* `iat`: issued at
* `exp`: expiration time
* `role`: custom claim (e.g. for authorization)

---

### ❌ When Not to Use JWT

* If your app uses traditional session-based auth (e.g. Spring Security with HTTP sessions)
* If you need to revoke tokens immediately (JWTs are usually not revocable unless blacklisted)
* If you store sensitive data in the token (JWTs can be decoded by anyone, even if signed)

---

### ✅ JWT vs Session Auth: Quick Comparison

| Feature             | JWT                               | Session (cookie-based)      |
| ------------------- | --------------------------------- | --------------------------- |
| Server-side storage | ❌ No                              | ✅ Yes                       |
| Scalable            | ✅ Yes                             | ❌ Needs session replication |
| Stateless           | ✅ Yes                             | ❌ No                        |
| Token revocation    | ❌ Hard                            | ✅ Easy                      |
| Secure by default   | ⚠️ Only if HTTPS + best practices | ✅ Yes (with secure cookies) |

---


### ✅ What is a Claim in a JWT?

A 'Claim' is a piece of information stored inside a JWT token.
Think of it like a key-value pair that tells the backend something about the user or the token.

---

### 🔍 Example: JWT Payload with Claims

```json
{
  "sub": "1234567890",
  "username": "john_doe",
  "role": "admin",
  "iat": 1717380000,
  "exp": 1717383600
}
```

Each of these fields is a claim:

* `sub` = subject (typically user ID)
* `username` = custom claim
* `role` = custom claim
* `iat` = issued at time
* `exp` = expiration time

---

### 🧩 Types of Claims

| Type           | Description                                    | Example                          |
| -------------- | ---------------------------------------------- | -------------------------------- |
| Registered     | Standard claims defined by the JWT spec        | `iss`, `exp`, `iat`, `sub`, etc. |
| Public         | Custom claims with a defined naming convention | `email`, `username`, `role`      |
| Private        | Custom claims defined between two systems      | `department`, `tier`             |

---

### 🛠️ Why Use Claims in JWT?

1. Store user identity info
   (e.g. user ID, username)

2. Store roles or permissions
   (e.g. `role: admin`, `permissions: [read, write]`)

3. Set token expiration and metadata
   (e.g. `exp`, `iat`, `iss`)

4. Stateless authentication
   Everything needed to validate the user is **inside the token**.

---

### 🔧 Claim Example in Java (using `io.jsonwebtoken.Jwts`)

```java
String token = Jwts.builder()
    .setSubject("123456")
    .claim("username", "john_doe")
    .claim("role", "admin")
    .setIssuedAt(new Date())
    .setExpiration(new Date(System.currentTimeMillis() + 3600000)) // 1 hour
    .signWith(secretKey)
    .compact();
```

---

### 🚫 Security Note

* Never put sensitive data (like passwords) in claims — JWTs can be decoded by anyone.
* Claims are signed, not encrypted — so they can be read but not modified without breaking the signature.

---

### ✅ Summary

| Term               | Meaning                               |
| ------------------ | ------------------------------------- |
| Claim              | A key-value pair stored in the JWT    |
| Use                | Represents user info, roles, metadata |
| Visible to client? | ✅ Yes (unless encrypted separately)   |
| Trusted?           | ✅ Yes (if signature is verified)      |

---

