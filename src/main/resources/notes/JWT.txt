### ‚úÖ What is JWT (JSON Web Token)?

JWT is a compact, URL-safe token format used for securely transmitting information between parties,
most commonly for authentication and authorization in modern web applications and APIs.

---

### üîê JWT Structure

A JWT looks like this:

```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJzdWIiOiIxMjM0NTYiLCJyb2xlIjoiadminIiwiaWF0IjoxNjEyMzQ1Njc4fQ.
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

It has 3 parts, separated by dots:

1. Header ‚Äì algorithm & token type
2. Payload ‚Äì user info / claims
3. Signature ‚Äì for integrity & verification

---

### üß† Why Use JWT?

#### ‚úÖ 1. ** Stateless Authentication **

* No need to store sessions on the server.
* All the user info is stored inside the token itself.

#### ‚úÖ 2. ** Scalable for Microservices & APIs **

* Works well across services without needing shared session storage.
* The backend just **verifies** the token.

#### ‚úÖ 3. ** Portable & Compact **

* Can be sent via HTTP headers, cookies, or URLs.
* Base64-encoded and compact.

#### ‚úÖ 4. ** Secure ** (if implemented properly)

* Tokens are signed (often with HMAC or RSA) ‚Äî can't be tampered with.

---

### üîê Common Use Case: JWT Authentication Flow

1. User logs in with username/password.
2. Server validates credentials and returns a JWT.
3. Client stores the token (usually in localStorage or memory).
4. Client sends the JWT in the `Authorization` header with each request:

   ```
   Authorization: Bearer <jwt_token>
   ```
5. Server verifies the token on every request ‚Äî no session needed.

---

### üì¶ Example JWT Payload (Decoded):

```json
{
  "sub": "123456",
  "username": "john_doe",
  "role": "admin",
  "iat": 1717400000,
  "exp": 1717403600
}
```

* `sub`: subject (user ID)
* `iat`: issued at
* `exp`: expiration time
* `role`: custom claim (e.g. for authorization)

---

### ‚ùå When Not to Use JWT

* If your app uses traditional session-based auth (e.g. Spring Security with HTTP sessions)
* If you need to revoke tokens immediately (JWTs are usually not revocable unless blacklisted)
* If you store sensitive data in the token (JWTs can be decoded by anyone, even if signed)

---

### ‚úÖ JWT vs Session Auth: Quick Comparison

| Feature             | JWT                               | Session (cookie-based)      |
| ------------------- | --------------------------------- | --------------------------- |
| Server-side storage | ‚ùå No                              | ‚úÖ Yes                       |
| Scalable            | ‚úÖ Yes                             | ‚ùå Needs session replication |
| Stateless           | ‚úÖ Yes                             | ‚ùå No                        |
| Token revocation    | ‚ùå Hard                            | ‚úÖ Easy                      |
| Secure by default   | ‚ö†Ô∏è Only if HTTPS + best practices | ‚úÖ Yes (with secure cookies) |

---